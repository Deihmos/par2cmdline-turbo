name: Build release binary
on:
  release:
    types: [published]
  #push:
  #  tags:
  #  - v*.*.*

jobs:
  build-win:
    strategy:
      matrix:
        include:
        - platform: x64
          bcj: -mf=BCJ2
          name: x64
          toolset: ClangCL
          ompdll: libomp.dll
        - platform: Win32
          bcj: -mf=BCJ2
          name: x86
          toolset: ClangCL
          ompdll: libomp.dll
        - platform: ARM64
          bcj: # -mf=ARM64
          name: arm64
          toolset: v142
          ompdll: vcomp140.dll
    name: Build ${{ matrix.name }} Windows binary
    runs-on: windows-2019
    steps:
      - uses: ilammy/msvc-dev-cmd@v1
      - uses: actions/checkout@v3
      - name: Get release
        id: get_release
        uses: bruceadams/get-release@v1.2.3
        env:
          GITHUB_TOKEN: ${{ github.token }}
      - run: msbuild -property:PlatformToolset=${{ matrix.toolset }} -property:Configuration=Release -property:Platform=${{ matrix.platform }} par2cmdline.sln
      - run: move "${{ matrix.platform }}\Release\par2.exe" par2.exe && move "${{ matrix.platform }}\Release\${{ matrix.ompdll }}" ${{ matrix.ompdll }} && 7z a -t7z -mx=9 ${{ matrix.bcj }} par2.7z par2.exe ${{ matrix.ompdll }}
      - uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ steps.get_release.outputs.upload_url }} 
          asset_path: ./par2.7z
          asset_name: par2cmdline-turbo-${{ steps.get_release.outputs.tag_name }}-win-${{ matrix.name }}.7z
          asset_content_type: application/octet-stream
  
  build-linux-static:
    strategy:
      matrix:
        include:
        - arch: amd64
          xz_bcj: --x86
          xcc: 
          configure_host: 
        - arch: arm64
          xz_bcj: # --arm64 # requires xz utils >=5.4 to decompress
          xcc: aarch64-linux-gnu-
          configure_host: --host=aarch64-linux-gnu
        - arch: armhf
          xz_bcj: --arm
          xcc: arm-linux-gnueabihf-
          configure_host: --host=armv7l-linux-gnueabihf
    name: Build ${{ matrix.arch }} Linux static binary
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Get release
        id: get_release
        uses: bruceadams/get-release@v1.2.3
        env:
          GITHUB_TOKEN: ${{ github.token }}
      - uses: cyberjunk/gha-ubuntu-cross@v2
        with:
          arch: ${{ matrix.arch }}
        if: ${{ matrix.arch != 'amd64' }}
      - run: aclocal && automake --warnings=all --add-missing && autoconf --warnings=all
      - run: ./configure --enable-openmp ${{ matrix.configure_host }}
        env:
          CC: ${{ matrix.xcc }}gcc
          CXX: ${{ matrix.xcc }}g++
          LDFLAGS: -static
      - run: make
      - run: ./par2 -h
        if: ${{ matrix.arch == 'amd64' }}
      - run: make check
        if: ${{ matrix.arch == 'amd64' }}
      - run: xz -9e ${{ matrix.xz_bcj }} --lzma2 par2 -c > par2.xz
      - uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ steps.get_release.outputs.upload_url }} 
          asset_path: ./par2.xz
          asset_name: par2cmdline-turbo-${{ steps.get_release.outputs.tag_name }}-linux-${{ matrix.arch }}.xz
          asset_content_type: application/octet-stream

  build-mac-x64:
    name: Build x64 MacOS binary
    runs-on: macos-latest
    steps:
      - uses: ConorMacBride/install-package@v1
        with:
          brew: automake libomp llvm
      - run: |
          if [ -f "`brew --prefix llvm`/bin/clang" ]; then
            echo "CC=`brew --prefix llvm`/bin/clang" >> $GITHUB_ENV
            echo "CXX=`brew --prefix llvm`/bin/clang++" >> $GITHUB_ENV
          fi
          if [ -d "`brew --prefix llvm`/lib" ]; then
            echo "LIBOMP_PATH=`brew --prefix llvm`/lib" >> $GITHUB_ENV
          else
            echo "LIBOMP_PATH=/usr/local/opt/libomp/lib" >> $GITHUB_ENV
          fi
      - uses: actions/checkout@v3
      - name: Get release
        id: get_release
        uses: bruceadams/get-release@v1.2.3
        env:
          GITHUB_TOKEN: ${{ github.token }}
      - run: aclocal && automake --warnings=all --add-missing && autoconf --warnings=all
      - run: ./configure --enable-openmp
      - run: make
      - run: |
          cp $LIBOMP_PATH/libomp.dylib .
          chmod 0644 libomp.dylib
          LC_RPATH="$(otool -l par2 | grep -A2 LC_RPATH | tail -n1 | sed 's/^ *path //' | sed 's/ (offset .*)$//')"
          if [ -z "$LC_RPATH" ]; then
            install_name_tool -change $LIBOMP_PATH/libomp.dylib @rpath/libomp.dylib -add_rpath @executable_path par2
          else
            install_name_tool -change $LIBOMP_PATH/libomp.dylib @rpath/libomp.dylib -rpath "$LC_RPATH" @executable_path par2
          fi
      - run: ./par2 -h
      - run: make check
      - run: tar -Jcf par2.txz par2 libomp.dylib
        env:
          XZ_OPT: -9e --x86 --lzma2
      - uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ steps.get_release.outputs.upload_url }} 
          asset_path: ./par2.txz
          asset_name: par2cmdline-turbo-${{ steps.get_release.outputs.tag_name }}-macos-x64.tar.xz
          asset_content_type: application/octet-stream

#  build-mac-arm64:
#    name: Build arm64 MacOS binary
#    # avoid OpenSSL 3.0.2 on 22.04: https://github.com/tpoechtrager/osxcross/issues/349
#    runs-on: ubuntu-20.04
#    steps:
#      - uses: mbround18/setup-osxcross@main  # OSXCROSS_TARGET unavailable in v1.1
#        with:
#          osx-version: "12.3"
#      - run: osxcross-macports install -arm64 libomp
#        env:
#          MACOSX_DEPLOYMENT_TARGET: "12.3"
#          UNATTENDED: 1
#      - run: |
#          if [ ! -d "$OSXCROSS_TARGET/macports/pkgs/opt/local" ]; then
#            echo "Error! Failed to find ${OSXCROSS_TARGET}/macports/pkgs/opt/local folder!"
#            exit 1
#          fi
#          echo "LIBRARY_PATH=$OSXCROSS_TARGET/macports/pkgs/opt/local/lib/libomp" >> $GITHUB_ENV
#          echo "CPATH=$OSXCROSS_TARGET/macports/pkgs/opt/local/include/libomp" >> $GITHUB_ENV
#      - uses: actions/checkout@v3
#      - name: Get release
#        id: get_release
#        uses: bruceadams/get-release@v1.2.3
#        env:
#          GITHUB_TOKEN: ${{ github.token }}
#      - run: aclocal && automake --warnings=all --add-missing && autoconf --warnings=all
#      - run: ./configure --enable-openmp --host=aarch64-macos
#        env:
#          CC: oa64-clang
#          CXX: oa64-clang++
#          AR: arm64-apple-darwin21.4-ar
#          RANLIB: arm64-apple-darwin21.4-ranlib
#          STRIP: arm64-apple-darwin21.4-strip
#      - run: make
#      - run: |
#          cp $LIBRARY_PATH/libomp.dylib .
#          chmod 0644 libomp.dylib
#          LC_RPATH="$(arm64-apple-darwin21.4-otool -l par2 | grep -A2 LC_RPATH | tail -n1 | sed 's/^ *path //' | sed 's/ (offset .*)$//')"
#          if [ -z "$LC_RPATH" ]; then
#            arm64-apple-darwin21.4-install_name_tool -change /opt/local/lib/libomp/libomp.dylib @rpath/libomp.dylib -add_rpath @executable_path par2
#          else
#            arm64-apple-darwin21.4-install_name_tool -change /opt/local/lib/libomp/libomp.dylib @rpath/libomp.dylib -rpath "$LC_RPATH" @executable_path par2
#          fi
#      - run: |
#          wget -q -O- https://github.com/indygreg/apple-platform-rs/releases/download/apple-codesign%2F0.22.0/apple-codesign-0.22.0-x86_64-unknown-linux-musl.tar.gz | tar zxf -
#          apple-codesign*/rcodesign sign par2
#      - run: tar --group=nobody --owner=nobody -Jcf par2.txz par2 libomp.dylib
#        env:
#          XZ_OPT: -9e --lzma2
#      - uses: actions/upload-release-asset@v1
#        env:
#          GITHUB_TOKEN: ${{ github.token }}
#        with:
#          upload_url: ${{ steps.get_release.outputs.upload_url }} 
#          asset_path: ./par2.txz
#          asset_name: par2cmdline-turbo-${{ steps.get_release.outputs.tag_name }}-macos-arm64.tar.xz
#          asset_content_type: application/octet-stream
